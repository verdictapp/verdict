// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model users {
  id         Int      @id @default(autoincrement())
  username   String?  @unique
  email      String?  @unique
  phone      String?  @unique
  password   String?
  verified   Boolean  @default(false)
  membership Boolean  @default(false)
  admin      Boolean  @default(false)
  createdAt  DateTime @default(now())
  votes      votes[]
}

model topics {
  id         Int         @id @default(autoincrement())
  image      String?
  stats      Json
  timedStats Json
  state      Int
  createdAt  DateTime    @default(now())
  votes      votes[]
  topicInfo  topicInfo[]
  tagged     tagged[]
}

model languages {
  id        Int         @id @default(autoincrement())
  language  String      @unique
  code      String      @unique
  topicInfo topicInfo[]
}

model topicInfo {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  options     Json
  topics      topics?    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId     Int?
  languages   languages? @relation(fields: [languageId], references: [id], onDelete: Cascade)
  languageId  Int?
}

model tags {
  id     Int      @id @default(autoincrement())
  name   String
  tagged tagged[]
}

model votes {
  id        Int      @id @default(autoincrement())
  vote      String
  changed   Boolean  @default(false)
  createdAt DateTime @default(now())
  user      users?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
  topic     topics?  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   Int?
}

model tagged {
  id       Int     @id @default(autoincrement())
  tag      tags?   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId    Int?
  topics   topics? @relation(fields: [topicsId], references: [id], onDelete: Cascade)
  topicsId Int?
}
